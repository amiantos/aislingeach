//
// HordeV2API.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import Foundation

open class HordeClientAPI {
    public static var basePath = "https://stablehorde.net/api"
    public static var credential: URLCredential?
    public static var customHeaders: [String: String] = [:]
    public static var requestBuilderFactory: HordeRequestBuilderFactory = HordeAlamofireRequestBuilderFactory()
}

open class HordeV2API {
    /**
     Moderator Only: Delete a regex filter

     - parameter filterId: (path)
     - parameter apikey: (header) A mod API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFilterSingle(filterId: String, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: SimpleResponse?, _ error: Error?) -> Void)) {
        deleteFilterSingleWithRequestBuilder(filterId: filterId, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Moderator Only: Delete a regex filter
          - DELETE /v2/filters/{filter_id}
          -

          - examples: [{contentType=application/json, example={
       "message" : "OK"
     }}]
          - parameter filterId: (path)
          - parameter apikey: (header) A mod API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<SimpleResponse>
          */
    open class func deleteFilterSingleWithRequestBuilder(filterId: String, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<SimpleResponse> {
        var path = "/v2/filters/{filter_id}"
        let filterIdPreEscape = "\(filterId)"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{filter_id}", with: filterIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<SimpleResponse>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Cancel an unfinished request

     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteImageAsyncStatus(_id: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: RequestStatusStable?, _ error: Error?) -> Void)) {
        deleteImageAsyncStatusWithRequestBuilder(_id: _id, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
     Cancel an unfinished request
     - DELETE /v2/generate/status/{id}

     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<RequestStatusStable>
     */
    open class func deleteImageAsyncStatusWithRequestBuilder(_id: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<RequestStatusStable> {
        var path = "/v2/generate/status/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<RequestStatusStable>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Cancel an unfinished interrogation request

     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteInterrogationStatus(_id: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: InterrogationStatus?, _ error: Error?) -> Void)) {
        deleteInterrogationStatusWithRequestBuilder(_id: _id, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Cancel an unfinished interrogation request
          - DELETE /v2/interrogate/status/{id}

          - examples: [{contentType=application/json, example={
       "state" : "state",
       "forms" : [ {
         "result" : {
           "*" : {
             "key" : { }
           }
         },
         "form" : "form",
         "state" : "state"
       }, {
         "result" : {
           "*" : {
             "key" : { }
           }
         },
         "form" : "form",
         "state" : "state"
       } ]
     }}]
          - parameter _id: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<InterrogationStatus>
          */
    open class func deleteInterrogationStatusWithRequestBuilder(_id: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<InterrogationStatus> {
        var path = "/v2/interrogate/status/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<InterrogationStatus>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Remove an IP from timeout

     - parameter body: (body)
     - parameter apikey: (header) A mod API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOperationsIp(body: DeleteTimeoutIPInput, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: SimpleResponse?, _ error: Error?) -> Void)) {
        deleteOperationsIpWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Remove an IP from timeout
          - DELETE /v2/operations/ipaddr

          - examples: [{contentType=application/json, example={
       "message" : "OK"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) A mod API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<SimpleResponse>
          */
    open class func deleteOperationsIpWithRequestBuilder(body: DeleteTimeoutIPInput, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<SimpleResponse> {
        let path = "/v2/operations/ipaddr"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<SimpleResponse>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Delete an existing SharedKey for this user

     - parameter sharedkeyId: (path)
     - parameter apikey: (header) User API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSharedKeySingle(sharedkeyId: String, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: SimpleResponse?, _ error: Error?) -> Void)) {
        deleteSharedKeySingleWithRequestBuilder(sharedkeyId: sharedkeyId, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Delete an existing SharedKey for this user
          - DELETE /v2/sharedkeys/{sharedkey_id}
          -

          - examples: [{contentType=application/json, example={
       "message" : "OK"
     }}]
          - parameter sharedkeyId: (path)
          - parameter apikey: (header) User API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<SimpleResponse>
          */
    open class func deleteSharedKeySingleWithRequestBuilder(sharedkeyId: String, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<SimpleResponse> {
        var path = "/v2/sharedkeys/{sharedkey_id}"
        let sharedkeyIdPreEscape = "\(sharedkeyId)"
        let sharedkeyIdPostEscape = sharedkeyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedkey_id}", with: sharedkeyIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<SimpleResponse>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Delete the team entry

     - parameter teamId: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter apikey: (header) The Moderator or Owner API key (optional)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTeamSingle(teamId: String, clientAgent: String? = nil, apikey: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: DeletedTeam?, _ error: Error?) -> Void)) {
        deleteTeamSingleWithRequestBuilder(teamId: teamId, clientAgent: clientAgent, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Delete the team entry
          - DELETE /v2/teams/{team_id}

          - examples: [{contentType=application/json, example={
       "deleted_id" : "deleted_id",
       "deleted_name" : "deleted_name"
     }}]
          - parameter teamId: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter apikey: (header) The Moderator or Owner API key (optional)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<DeletedTeam>
          */
    open class func deleteTeamSingleWithRequestBuilder(teamId: String, clientAgent: String? = nil, apikey: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<DeletedTeam> {
        var path = "/v2/teams/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<DeletedTeam>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Cancel an unfinished request

     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTextAsyncStatus(_id: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: RequestStatusKobold?, _ error: Error?) -> Void)) {
        deleteTextAsyncStatusWithRequestBuilder(_id: _id, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
     Cancel an unfinished request
     - DELETE /v2/generate/text/status/{id}

     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<RequestStatusKobold>
     */
    open class func deleteTextAsyncStatusWithRequestBuilder(_id: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<RequestStatusKobold> {
        var path = "/v2/generate/text/status/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<RequestStatusKobold>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Delete the worker entry

     - parameter workerId: (path)
     - parameter apikey: (header) The Moderator or Owner API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteWorkerSingle(workerId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: DeletedWorker?, _ error: Error?) -> Void)) {
        deleteWorkerSingleWithRequestBuilder(workerId: workerId, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Delete the worker entry
          - DELETE /v2/workers/{worker_id}

          - examples: [{contentType=application/json, example={
       "deleted_id" : "deleted_id",
       "deleted_name" : "deleted_name"
     }}]
          - parameter workerId: (path)
          - parameter apikey: (header) The Moderator or Owner API key (optional)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<DeletedWorker>
          */
    open class func deleteWorkerSingleWithRequestBuilder(workerId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<DeletedWorker> {
        var path = "/v2/workers/{worker_id}"
        let workerIdPreEscape = "\(workerId)"
        let workerIdPostEscape = workerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worker_id}", with: workerIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<DeletedWorker>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Moderator Only: A List all filters, or filtered by the query

     - parameter apikey: (header) A mod API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter filterType: (query) The filter type (optional)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFilterRegex(apikey: String, clientAgent: String? = nil, filterType: Int? = nil, xFields: String? = nil, completion: @escaping ((_ data: [FilterRegex]?, _ error: Error?) -> Void)) {
        getFilterRegexWithRequestBuilder(apikey: apikey, clientAgent: clientAgent, filterType: filterType, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Moderator Only: A List all filters, or filtered by the query
          - GET /v2/filters/regex
          -

          - examples: [{contentType=application/json, example=[ {
       "regex" : "regex",
       "filter_type" : 10
     }, {
       "regex" : "regex",
       "filter_type" : 10
     } ]}]
          - parameter apikey: (header) A mod API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter filterType: (query) The filter type (optional)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<[FilterRegex]>
          */
    open class func getFilterRegexWithRequestBuilder(apikey: String, clientAgent: String? = nil, filterType: Int? = nil, xFields: String? = nil) -> HordeRequestBuilder<[FilterRegex]> {
        let path = "/v2/filters/regex"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter_type": filterType?.encodeToJSON(),
        ])
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<[FilterRegex]>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Moderator Only: Display a single filter

     - parameter filterId: (path)
     - parameter apikey: (header) A mod API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFilterSingle(filterId: String, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: [FilterDetails]?, _ error: Error?) -> Void)) {
        getFilterSingleWithRequestBuilder(filterId: filterId, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Moderator Only: Display a single filter
          - GET /v2/filters/{filter_id}
          -

          - examples: [{contentType=application/json, example=[ {
       "regex" : "ac.*",
       "filter_type" : 10,
       "description" : "description",
       "id" : "id",
       "replacement" : "replacement",
       "user" : "user"
     }, {
       "regex" : "ac.*",
       "filter_type" : 10,
       "description" : "description",
       "id" : "id",
       "replacement" : "replacement",
       "user" : "user"
     } ]}]
          - parameter filterId: (path)
          - parameter apikey: (header) A mod API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<[FilterDetails]>
          */
    open class func getFilterSingleWithRequestBuilder(filterId: String, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<[FilterDetails]> {
        var path = "/v2/filters/{filter_id}"
        let filterIdPreEscape = "\(filterId)"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{filter_id}", with: filterIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<[FilterDetails]>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Moderator Only: A List all filters, or filtered by the query

     - parameter apikey: (header) A mod API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter filterType: (query) The filter type (optional)
     - parameter contains: (query) Only return filter containing this word (optional)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFilters(apikey: String, clientAgent: String? = nil, filterType: Int? = nil, contains: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: [FilterDetails]?, _ error: Error?) -> Void)) {
        getFiltersWithRequestBuilder(apikey: apikey, clientAgent: clientAgent, filterType: filterType, contains: contains, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Moderator Only: A List all filters, or filtered by the query
          - GET /v2/filters
          -

          - examples: [{contentType=application/json, example=[ {
       "regex" : "ac.*",
       "filter_type" : 10,
       "description" : "description",
       "id" : "id",
       "replacement" : "replacement",
       "user" : "user"
     }, {
       "regex" : "ac.*",
       "filter_type" : 10,
       "description" : "description",
       "id" : "id",
       "replacement" : "replacement",
       "user" : "user"
     } ]}]
          - parameter apikey: (header) A mod API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter filterType: (query) The filter type (optional)
          - parameter contains: (query) Only return filter containing this word (optional)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<[FilterDetails]>
          */
    open class func getFiltersWithRequestBuilder(apikey: String, clientAgent: String? = nil, filterType: Int? = nil, contains: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<[FilterDetails]> {
        let path = "/v2/filters"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter_type": filterType?.encodeToJSON(),
            "contains": contains,
        ])
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<[FilterDetails]>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Lookup user details based on their API key

     - parameter apikey: (header) User API key we&#x27;re looking for (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFindUser(apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: UserDetails?, _ error: Error?) -> Void)) {
        getFindUserWithRequestBuilder(apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Lookup user details based on their API key
          - GET /v2/find_user

          - examples: [{contentType=application/json, example={
       "worker_count" : 7,
       "kudos" : 6.027456183070403,
       "records" : {
         "usage" : {
           "tokens" : 4,
           "megapixelsteps" : 1.1730742509559433
         },
         "fulfillment" : {
           "image" : 5,
           "interrogation" : 9,
           "text" : 9
         }
       },
       "pseudonymous" : false,
       "moderator" : false,
       "usage" : {
         "requests" : 1,
         "megapixelsteps" : 1.0246457001441578
       },
       "account_age" : 60,
       "kudos_details" : {
         "gifted" : 7.061401241503109,
         "awarded" : 4.145608029883936,
         "recurring" : 2.027123023002322,
         "admin" : 9.301444243932576,
         "received" : 3.616076749251911,
         "accumulated" : 2.3021358869347655
       },
       "worker_ids" : [ "00000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000" ],
       "worker_invited" : 5,
       "suspicious" : 0,
       "concurrency" : 5,
       "sharedkey_ids" : [ "00000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000" ],
       "contributions" : {
         "fulfillments" : 7,
         "megapixelsteps" : 6.84685269835264
       },
       "flagged" : false,
       "trusted" : false,
       "vpn" : false,
       "contact" : "email@example.com",
       "id" : 0,
       "monthly_kudos" : {
         "last_received" : "2000-01-23T04:56:07.000+00:00",
         "amount" : 1
       },
       "username" : "username",
       "evaluating_kudos" : 1.4658129805029452
     }}]
          - parameter apikey: (header) User API key we&#x27;re looking for (optional)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<UserDetails>
          */
    open class func getFindUserWithRequestBuilder(apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<UserDetails> {
        let path = "/v2/find_user"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<UserDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     If this loads, this node is available

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHeartbeat(clientAgent: String? = nil, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        getHeartbeatWithRequestBuilder(clientAgent: clientAgent).execute { _, error in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     If this loads, this node is available
     - GET /v2/status/heartbeat
     -

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)

     - returns: RequestBuilder<Void>
     */
    open class func getHeartbeatWithRequestBuilder(clientAgent: String? = nil) -> HordeRequestBuilder<Void> {
        let path = "/v2/status/heartbeat"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<Void>.Type = HordeClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Details about the current performance of this Horde

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHordeLoad(clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: HordePerformance?, _ error: Error?) -> Void)) {
        getHordeLoadWithRequestBuilder(clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Details about the current performance of this Horde
          - GET /v2/status/performance
          -

          - examples: [{contentType=application/json, example={
       "past_minute_megapixelsteps" : 9.301444243932576,
       "queued_forms" : 3.616076749251911,
       "interrogator_thread_count" : 4,
       "worker_count" : 1,
       "queued_megapixelsteps" : 7.061401241503109,
       "queued_requests" : 0,
       "text_worker_count" : 5,
       "past_minute_tokens" : 1.2315135367772556,
       "queued_tokens" : 7.386281948385884,
       "text_thread_count" : 2,
       "interrogator_count" : 2,
       "queued_text_requests" : 6,
       "thread_count" : 5
     }}]
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<HordePerformance>
          */
    open class func getHordeLoadWithRequestBuilder(clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<HordePerformance> {
        let path = "/v2/status/performance"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<HordePerformance>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Horde Maintenance Mode Status

     - parameter apikey: (header) The Admin or Owner API key (optional)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHordeModes(apikey: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: HordeModes?, _ error: Error?) -> Void)) {
        getHordeModesWithRequestBuilder(apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Horde Maintenance Mode Status
          - GET /v2/status/modes

          - examples: [{contentType=application/json, example={
       "raid_mode" : true,
       "maintenance_mode" : true,
       "invite_only_mode" : true
     }}]
          - parameter apikey: (header) The Admin or Owner API key (optional)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<HordeModes>
          */
    open class func getHordeModesWithRequestBuilder(apikey: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<HordeModes> {
        let path = "/v2/status/modes"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<HordeModes>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Read the latest happenings on the horde

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHordeNews(clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: [Newspiece]?, _ error: Error?) -> Void)) {
        getHordeNewsWithRequestBuilder(clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Read the latest happenings on the horde
          - GET /v2/status/news
          -

          - examples: [{contentType=application/json, example=[ {
       "date_published" : "date_published",
       "importance" : "Information",
       "newspiece" : "newspiece"
     }, {
       "date_published" : "date_published",
       "importance" : "Information",
       "newspiece" : "newspiece"
     } ]}]
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<[Newspiece]>
          */
    open class func getHordeNewsWithRequestBuilder(clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<[Newspiece]> {
        let path = "/v2/status/news"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<[Newspiece]>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieve the status of an Asynchronous generation request without images

     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getImageAsyncCheck(_id: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: RequestStatusCheck?, _ error: Error?) -> Void)) {
        getImageAsyncCheckWithRequestBuilder(_id: _id, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Retrieve the status of an Asynchronous generation request without images
          - GET /v2/generate/check/{id}

          - examples: [{contentType=application/json, example={
       "queue_position" : 2,
       "waiting" : 5,
       "faulted" : false,
       "wait_time" : 5,
       "kudos" : 7.061401241503109,
       "restarted" : 1,
       "processing" : 6,
       "finished" : 0,
       "is_possible" : true,
       "done" : true
     }}]
          - parameter _id: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<RequestStatusCheck>
          */
    open class func getImageAsyncCheckWithRequestBuilder(_id: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<RequestStatusCheck> {
        var path = "/v2/generate/check/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<RequestStatusCheck>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieve the full status of an Asynchronous generation request

     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getImageAsyncStatus(_id: String, clientAgent: String? = nil, xFields: String? = nil) async throws -> RequestStatusStable {
        return try await withCheckedThrowingContinuation { continuation in
            getImageAsyncStatusWithRequestBuilder(_id: _id, clientAgent: clientAgent, xFields: xFields).execute { response, error in
                if let error = error {
                    continuation.resume(throwing: error)
                } else {
                    guard let result = response?.body else {
                        fatalError("Expected non-nil result in the non-error case")
                    }
                    continuation.resume(returning: result)
                }
            }
        }
    }

    /**
     Retrieve the full status of an Asynchronous generation request
     - GET /v2/generate/status/{id}

     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<RequestStatusStable>
     */
    open class func getImageAsyncStatusWithRequestBuilder(_id: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<RequestStatusStable> {
        var path = "/v2/generate/status/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<RequestStatusStable>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Details how many images were generated per model for the past day, month and total

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getImageHordeStatsModels(clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: ImgModelStats?, _ error: Error?) -> Void)) {
        getImageHordeStatsModelsWithRequestBuilder(clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Details how many images were generated per model for the past day, month and total
          - GET /v2/stats/img/models
          -

          - examples: [{contentType=application/json, example={
       "day" : {
         "*" : {
           "key" : 0
         }
       }
     }}]
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<ImgModelStats>
          */
    open class func getImageHordeStatsModelsWithRequestBuilder(clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<ImgModelStats> {
        let path = "/v2/stats/img/models"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<ImgModelStats>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Details how many images have been generated in the past minux,hour,day,month and total

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getImageHordeStatsTotals(clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: StatsImgTotals?, _ error: Error?) -> Void)) {
        getImageHordeStatsTotalsWithRequestBuilder(clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Details how many images have been generated in the past minux,hour,day,month and total
          - GET /v2/stats/img/totals

          - examples: [{contentType=application/json, example={
       "minute" : {
         "tokens" : 6,
         "requests" : 0
       }
     }}]
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<StatsImgTotals>
          */
    open class func getImageHordeStatsTotalsWithRequestBuilder(clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<StatsImgTotals> {
        let path = "/v2/stats/img/totals"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<StatsImgTotals>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieve the full status of an interrogation request

     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInterrogationStatus(_id: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: InterrogationStatus?, _ error: Error?) -> Void)) {
        getInterrogationStatusWithRequestBuilder(_id: _id, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Retrieve the full status of an interrogation request
          - GET /v2/interrogate/status/{id}

          - examples: [{contentType=application/json, example={
       "state" : "state",
       "forms" : [ {
         "result" : {
           "*" : {
             "key" : { }
           }
         },
         "form" : "form",
         "state" : "state"
       }, {
         "result" : {
           "*" : {
             "key" : { }
           }
         },
         "form" : "form",
         "state" : "state"
       } ]
     }}]
          - parameter _id: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<InterrogationStatus>
          */
    open class func getInterrogationStatusWithRequestBuilder(_id: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<InterrogationStatus> {
        var path = "/v2/interrogate/status/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<InterrogationStatus>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Returns a list of models active currently in this horde

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter type: (query) Filter the models by type (image or text) (optional, default to image)
     - parameter minCount: (query) Filter only models that have at least this amount of threads serving (optional)
     - parameter maxCount: (query) Filter the models that have at most this amount of threads serving (optional)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModels(clientAgent: String? = nil, type: String? = nil, minCount: Int? = nil, maxCount: Int? = nil, xFields: String? = nil, completion: @escaping ((_ data: [ActiveModel]?, _ error: Error?) -> Void)) {
        getModelsWithRequestBuilder(clientAgent: clientAgent, type: type, minCount: minCount, maxCount: maxCount, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
     Returns a list of models active currently in this horde
     - GET /v2/status/models
     -

     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter type: (query) Filter the models by type (image or text) (optional, default to image)
     - parameter minCount: (query) Filter only models that have at least this amount of threads serving (optional)
     - parameter maxCount: (query) Filter the models that have at most this amount of threads serving (optional)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<[ActiveModel]>
     */
    open class func getModelsWithRequestBuilder(clientAgent: String? = nil, type: String? = nil, minCount: Int? = nil, maxCount: Int? = nil, xFields: String? = nil) -> HordeRequestBuilder<[ActiveModel]> {
        let path = "/v2/status/models"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type,
            "min_count": minCount?.encodeToJSON(),
            "max_count": maxCount?.encodeToJSON(),
        ])
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<[ActiveModel]>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get details about an existing Shared Key for this user

     - parameter sharedkeyId: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSharedKeySingle(sharedkeyId: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: SharedKeyDetails?, _ error: Error?) -> Void)) {
        getSharedKeySingleWithRequestBuilder(sharedkeyId: sharedkeyId, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Get details about an existing Shared Key for this user
          - GET /v2/sharedkeys/{sharedkey_id}
          -

          - examples: [{contentType=application/json, example={
       "kudos" : 0,
       "id" : "id",
       "expiry" : "2000-01-23T04:56:07.000+00:00",
       "utilized" : 6,
       "username" : "username"
     }}]
          - parameter sharedkeyId: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<SharedKeyDetails>
          */
    open class func getSharedKeySingleWithRequestBuilder(sharedkeyId: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<SharedKeyDetails> {
        var path = "/v2/sharedkeys/{sharedkey_id}"
        let sharedkeyIdPreEscape = "\(sharedkeyId)"
        let sharedkeyIdPostEscape = sharedkeyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedkey_id}", with: sharedkeyIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<SharedKeyDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Details of a worker Team

     - parameter teamId: (path)
     - parameter apikey: (header) The Moderator or Owner API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeamSingle(teamId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: TeamDetails?, _ error: Error?) -> Void)) {
        getTeamSingleWithRequestBuilder(teamId: teamId, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
     Details of a worker Team
     - GET /v2/teams/{team_id}
     -

     - examples: [{contentType=application/json, example=""}]
     - parameter teamId: (path)
     - parameter apikey: (header) The Moderator or Owner API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<TeamDetails>
     */
    open class func getTeamSingleWithRequestBuilder(teamId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<TeamDetails> {
        var path = "/v2/teams/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<TeamDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     A List with the details of all teams

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeams(clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: [TeamDetails]?, _ error: Error?) -> Void)) {
        getTeamsWithRequestBuilder(clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
     A List with the details of all teams
     - GET /v2/teams
     -

     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<[TeamDetails]>
     */
    open class func getTeamsWithRequestBuilder(clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<[TeamDetails]> {
        let path = "/v2/teams"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<[TeamDetails]>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieve the full status of an Asynchronous generation request

     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTextAsyncStatus(_id: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: RequestStatusKobold?, _ error: Error?) -> Void)) {
        getTextAsyncStatusWithRequestBuilder(_id: _id, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
     Retrieve the full status of an Asynchronous generation request
     - GET /v2/generate/text/status/{id}

     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<RequestStatusKobold>
     */
    open class func getTextAsyncStatusWithRequestBuilder(_id: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<RequestStatusKobold> {
        var path = "/v2/generate/text/status/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<RequestStatusKobold>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Details how many texts were generated per model for the past day, month and total

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTextHordeStatsModels(clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: TxtModelStats?, _ error: Error?) -> Void)) {
        getTextHordeStatsModelsWithRequestBuilder(clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Details how many texts were generated per model for the past day, month and total
          - GET /v2/stats/text/models
          -

          - examples: [{contentType=application/json, example={
       "day" : {
         "*" : {
           "key" : 0
         }
       }
     }}]
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<TxtModelStats>
          */
    open class func getTextHordeStatsModelsWithRequestBuilder(clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<TxtModelStats> {
        let path = "/v2/stats/text/models"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<TxtModelStats>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Details how many texts have been generated in the past minux,hour,day,month and total

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTextHordeStatsTotals(clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: StatsTxtTotals?, _ error: Error?) -> Void)) {
        getTextHordeStatsTotalsWithRequestBuilder(clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Details how many texts have been generated in the past minux,hour,day,month and total
          - GET /v2/stats/text/totals

          - examples: [{contentType=application/json, example={
       "minute" : {
         "tokens" : 6,
         "requests" : 0
       }
     }}]
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<StatsTxtTotals>
          */
    open class func getTextHordeStatsTotalsWithRequestBuilder(clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<StatsTxtTotals> {
        let path = "/v2/stats/text/totals"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<StatsTxtTotals>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Details and statistics about a specific user

     - parameter userId: (path)
     - parameter apikey: (header) The Admin, Mod or Owner API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserSingle(userId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: UserDetails?, _ error: Error?) -> Void)) {
        getUserSingleWithRequestBuilder(userId: userId, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Details and statistics about a specific user
          - GET /v2/users/{user_id}
          -

          - examples: [{contentType=application/json, example={
       "worker_count" : 7,
       "kudos" : 6.027456183070403,
       "records" : {
         "usage" : {
           "tokens" : 4,
           "megapixelsteps" : 1.1730742509559433
         },
         "fulfillment" : {
           "image" : 5,
           "interrogation" : 9,
           "text" : 9
         }
       },
       "pseudonymous" : false,
       "moderator" : false,
       "usage" : {
         "requests" : 1,
         "megapixelsteps" : 1.0246457001441578
       },
       "account_age" : 60,
       "kudos_details" : {
         "gifted" : 7.061401241503109,
         "awarded" : 4.145608029883936,
         "recurring" : 2.027123023002322,
         "admin" : 9.301444243932576,
         "received" : 3.616076749251911,
         "accumulated" : 2.3021358869347655
       },
       "worker_ids" : [ "00000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000" ],
       "worker_invited" : 5,
       "suspicious" : 0,
       "concurrency" : 5,
       "sharedkey_ids" : [ "00000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000" ],
       "contributions" : {
         "fulfillments" : 7,
         "megapixelsteps" : 6.84685269835264
       },
       "flagged" : false,
       "trusted" : false,
       "vpn" : false,
       "contact" : "email@example.com",
       "id" : 0,
       "monthly_kudos" : {
         "last_received" : "2000-01-23T04:56:07.000+00:00",
         "amount" : 1
       },
       "username" : "username",
       "evaluating_kudos" : 1.4658129805029452
     }}]
          - parameter userId: (path)
          - parameter apikey: (header) The Admin, Mod or Owner API key (optional)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<UserDetails>
          */
    open class func getUserSingleWithRequestBuilder(userId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<UserDetails> {
        var path = "/v2/users/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<UserDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     A List with the details and statistic of all registered users

     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter page: (query) Which page of results to return. Each page has 25 users. (optional, default to 1)
     - parameter sort: (query) How to sort the returned list (optional, default to kudos)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(clientAgent: String? = nil, page: Int? = nil, sort: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: UserDetails?, _ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(clientAgent: clientAgent, page: page, sort: sort, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          A List with the details and statistic of all registered users
          - GET /v2/users
          -

          - examples: [{contentType=application/json, example={
       "worker_count" : 7,
       "kudos" : 6.027456183070403,
       "records" : {
         "usage" : {
           "tokens" : 4,
           "megapixelsteps" : 1.1730742509559433
         },
         "fulfillment" : {
           "image" : 5,
           "interrogation" : 9,
           "text" : 9
         }
       },
       "pseudonymous" : false,
       "moderator" : false,
       "usage" : {
         "requests" : 1,
         "megapixelsteps" : 1.0246457001441578
       },
       "account_age" : 60,
       "kudos_details" : {
         "gifted" : 7.061401241503109,
         "awarded" : 4.145608029883936,
         "recurring" : 2.027123023002322,
         "admin" : 9.301444243932576,
         "received" : 3.616076749251911,
         "accumulated" : 2.3021358869347655
       },
       "worker_ids" : [ "00000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000" ],
       "worker_invited" : 5,
       "suspicious" : 0,
       "concurrency" : 5,
       "sharedkey_ids" : [ "00000000-0000-0000-0000-000000000000", "00000000-0000-0000-0000-000000000000" ],
       "contributions" : {
         "fulfillments" : 7,
         "megapixelsteps" : 6.84685269835264
       },
       "flagged" : false,
       "trusted" : false,
       "vpn" : false,
       "contact" : "email@example.com",
       "id" : 0,
       "monthly_kudos" : {
         "last_received" : "2000-01-23T04:56:07.000+00:00",
         "amount" : 1
       },
       "username" : "username",
       "evaluating_kudos" : 1.4658129805029452
     }}]
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter page: (query) Which page of results to return. Each page has 25 users. (optional, default to 1)
          - parameter sort: (query) How to sort the returned list (optional, default to kudos)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<UserDetails>
          */
    open class func getUsersWithRequestBuilder(clientAgent: String? = nil, page: Int? = nil, sort: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<UserDetails> {
        let path = "/v2/users"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(),
            "sort": sort,
        ])
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<UserDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Details of a registered worker

     - parameter workerId: (path)
     - parameter apikey: (header) The Moderator or Owner API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkerSingle(workerId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: WorkerDetails?, _ error: Error?) -> Void)) {
        getWorkerSingleWithRequestBuilder(workerId: workerId, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
     Details of a registered worker
     - GET /v2/workers/{worker_id}

     - examples: [{contentType=application/json, example=""}]
     - parameter workerId: (path)
     - parameter apikey: (header) The Moderator or Owner API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<WorkerDetails>
     */
    open class func getWorkerSingleWithRequestBuilder(workerId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<WorkerDetails> {
        var path = "/v2/workers/{worker_id}"
        let workerIdPreEscape = "\(workerId)"
        let workerIdPostEscape = workerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worker_id}", with: workerIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<WorkerDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     A List with the details of all registered and active workers

     - parameter apikey: (header) A Moderator API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter type: (query) Filter the workers by type (image, text or interrogation) (optional)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getWorkers(apikey: String? = nil, clientAgent: String? = nil, type: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: [WorkerDetails]?, _ error: Error?) -> Void)) {
        getWorkersWithRequestBuilder(apikey: apikey, clientAgent: clientAgent, type: type, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
     A List with the details of all registered and active workers
     - GET /v2/workers
     -

     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter apikey: (header) A Moderator API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter type: (query) Filter the workers by type (image, text or interrogation) (optional)
     - parameter xFields: (header) An optional fields mask (optional)

     - returns: RequestBuilder<[WorkerDetails]>
     */
    open class func getWorkersWithRequestBuilder(apikey: String? = nil, clientAgent: String? = nil, type: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<[WorkerDetails]> {
        let path = "/v2/workers"
        let URLString = HordeClientAPI.basePath + path
        let parameters: [String: Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type,
        ])
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<[WorkerDetails]>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: url?.string ?? URLString, parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Moderator Only: Modify an existing regex filter

     - parameter body: (body)
     - parameter apikey: (header) A mod API key
     - parameter filterId: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchFilterSingle(body: PatchExistingFilter, apikey: String, filterId: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: FilterDetails?, _ error: Error?) -> Void)) {
        patchFilterSingleWithRequestBuilder(body: body, apikey: apikey, filterId: filterId, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Moderator Only: Modify an existing regex filter
          - PATCH /v2/filters/{filter_id}
          -

          - examples: [{contentType=application/json, example={
       "regex" : "ac.*",
       "filter_type" : 10,
       "description" : "description",
       "id" : "id",
       "replacement" : "replacement",
       "user" : "user"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) A mod API key
          - parameter filterId: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<FilterDetails>
          */
    open class func patchFilterSingleWithRequestBuilder(body: PatchExistingFilter, apikey: String, filterId: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<FilterDetails> {
        var path = "/v2/filters/{filter_id}"
        let filterIdPreEscape = "\(filterId)"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{filter_id}", with: filterIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<FilterDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Modify an existing Shared Key

     - parameter body: (body)
     - parameter apikey: (header) User API key
     - parameter sharedkeyId: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchSharedKeySingle(body: SharedKeyInput, apikey: String, sharedkeyId: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: SharedKeyDetails?, _ error: Error?) -> Void)) {
        patchSharedKeySingleWithRequestBuilder(body: body, apikey: apikey, sharedkeyId: sharedkeyId, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Modify an existing Shared Key
          - PATCH /v2/sharedkeys/{sharedkey_id}
          -

          - examples: [{contentType=application/json, example={
       "kudos" : 0,
       "id" : "id",
       "expiry" : "2000-01-23T04:56:07.000+00:00",
       "utilized" : 6,
       "username" : "username"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) User API key
          - parameter sharedkeyId: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<SharedKeyDetails>
          */
    open class func patchSharedKeySingleWithRequestBuilder(body: SharedKeyInput, apikey: String, sharedkeyId: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<SharedKeyDetails> {
        var path = "/v2/sharedkeys/{sharedkey_id}"
        let sharedkeyIdPreEscape = "\(sharedkeyId)"
        let sharedkeyIdPostEscape = sharedkeyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sharedkey_id}", with: sharedkeyIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<SharedKeyDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update a Team's information

     - parameter body: (body)
     - parameter teamId: (path)
     - parameter apikey: (header) The Moderator or Creator API key (optional)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func patchTeamSingle(body: ModifyTeamInput, teamId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: ModifyTeam?, _ error: Error?) -> Void)) {
        patchTeamSingleWithRequestBuilder(body: body, teamId: teamId, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Update a Team's information
          - PATCH /v2/teams/{team_id}
          -

          - examples: [{contentType=application/json, example={
       "name" : "name",
       "id" : "id",
       "info" : "info"
     }}]
          - parameter body: (body)
          - parameter teamId: (path)
          - parameter apikey: (header) The Moderator or Creator API key (optional)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<ModifyTeam>
          */
    open class func patchTeamSingleWithRequestBuilder(body: ModifyTeamInput, teamId: String, apikey: String? = nil, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<ModifyTeam> {
        var path = "/v2/teams/{team_id}"
        let teamIdPreEscape = "\(teamId)"
        let teamIdPostEscape = teamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: teamIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<ModifyTeam>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Submit aesthetic ratings for generated images to be used by LAION

     - parameter body: (body)
     - parameter _id: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAesthetics(body: AestheticsPayload, _id: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: GenerationSubmitted?, _ error: Error?) -> Void)) {
        postAestheticsWithRequestBuilder(body: body, _id: _id, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Submit aesthetic ratings for generated images to be used by LAION
          - POST /v2/generate/rate/{id}

          - examples: [{contentType=application/json, example={
       "reward" : 10.0
     }}]
          - parameter body: (body)
          - parameter _id: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<GenerationSubmitted>
          */
    open class func postAestheticsWithRequestBuilder(body: AestheticsPayload, _id: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<GenerationSubmitted> {
        var path = "/v2/generate/rate/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        Log.debug(url?.string)

        let requestBuilder: HordeRequestBuilder<GenerationSubmitted>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Awards Kudos to registed user

     - parameter body: (body)
     - parameter apikey: (header) The sending user&#x27;s API key
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAwardKudos(body: KudosAwardBody, apikey: String, xFields: String? = nil, completion: @escaping ((_ data: KudosAwarded?, _ error: Error?) -> Void)) {
        postAwardKudosWithRequestBuilder(body: body, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Awards Kudos to registed user
          - POST /v2/kudos/award

          - examples: [{contentType=application/json, example={
       "awarded" : 100
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The sending user&#x27;s API key
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<KudosAwarded>
          */
    open class func postAwardKudosWithRequestBuilder(body: KudosAwardBody, apikey: String, xFields: String? = nil) -> HordeRequestBuilder<KudosAwarded> {
        let path = "/v2/kudos/award"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<KudosAwarded>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Moderator Only: Check The suspicion of the provided prompt

     - parameter body: (body)
     - parameter apikey: (header) A mod API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFilters(body: V2FiltersBody, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: FilterPromptSuspicion?, _ error: Error?) -> Void)) {
        postFiltersWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Moderator Only: Check The suspicion of the provided prompt
          - POST /v2/filters
          -

          - examples: [{contentType=application/json, example={
       "suspicion" : "0",
       "matches" : [ "matches", "matches" ]
     }}]
          - parameter body: (body)
          - parameter apikey: (header) A mod API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<FilterPromptSuspicion>
          */
    open class func postFiltersWithRequestBuilder(body: V2FiltersBody, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<FilterPromptSuspicion> {
        let path = "/v2/filters"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<FilterPromptSuspicion>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Initiate an Asynchronous request to generate images

     - parameter body: (body)
     - parameter apikey: (header) The API Key corresponding to a registered user
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postImageAsyncGenerate(body: GenerationInputStable, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: RequestAsync?, _ error: Error?) -> Void)) {
        postImageAsyncGenerateWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Initiate an Asynchronous request to generate images
          - POST /v2/generate/async

          - examples: [{contentType=application/json, example={
       "kudos" : 0,
       "id" : "id",
       "message" : "message"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The API Key corresponding to a registered user
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<RequestAsync>
          */
    open class func postImageAsyncGenerateWithRequestBuilder(body: GenerationInputStable, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<RequestAsync> {
        let path = "/v2/generate/async"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<RequestAsync>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Check if there are generation requests queued for fulfillment

     - parameter body: (body)
     - parameter apikey: (header) The API Key corresponding to a registered user
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postImageJobPop(body: PopInputStable, apikey: String, xFields: String? = nil, completion: @escaping ((_ data: GenerationPayloadStable?, _ error: Error?) -> Void)) {
        postImageJobPopWithRequestBuilder(body: body, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Check if there are generation requests queued for fulfillment
          - POST /v2/generate/pop

          - examples: [{contentType=application/json, example={
       "source_mask" : "source_mask",
       "source_processing" : "img2img",
       "payload" : "",
       "source_image" : "source_image",
       "r2_upload" : "r2_upload",
       "model" : "model",
       "id" : "id",
       "skipped" : ""
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The API Key corresponding to a registered user
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<GenerationPayloadStable>
          */
    open class func postImageJobPopWithRequestBuilder(body: PopInputStable, apikey: String, xFields: String? = nil) -> HordeRequestBuilder<GenerationPayloadStable> {
        let path = "/v2/generate/pop"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<GenerationPayloadStable>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Submit a generated image

     - parameter body: (body)
     - parameter apikey: (header) The worker&#x27;s owner API key
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postImageJobSubmit(body: SubmitInputStable, apikey: String, xFields: String? = nil, completion: @escaping ((_ data: GenerationSubmitted?, _ error: Error?) -> Void)) {
        postImageJobSubmitWithRequestBuilder(body: body, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Submit a generated image
          - POST /v2/generate/submit

          - examples: [{contentType=application/json, example={
       "reward" : 10.0
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The worker&#x27;s owner API key
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<GenerationSubmitted>
          */
    open class func postImageJobSubmitWithRequestBuilder(body: SubmitInputStable, apikey: String, xFields: String? = nil) -> HordeRequestBuilder<GenerationSubmitted> {
        let path = "/v2/generate/submit"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<GenerationSubmitted>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Initiate an Asynchronous request to interrogate an image

     - parameter body: (body)
     - parameter apikey: (header) A User API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postInterrogate(body: ModelInterrogationInputStable, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: RequestInterrogationResponse?, _ error: Error?) -> Void)) {
        postInterrogateWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Initiate an Asynchronous request to interrogate an image
          - POST /v2/interrogate/async

          - examples: [{contentType=application/json, example={
       "id" : "id",
       "message" : "message"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) A User API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<RequestInterrogationResponse>
          */
    open class func postInterrogateWithRequestBuilder(body: ModelInterrogationInputStable, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<RequestInterrogationResponse> {
        let path = "/v2/interrogate/async"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<RequestInterrogationResponse>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Check if there are interrogation requests queued for fulfillment

     - parameter body: (body)
     - parameter apikey: (header) The API Key corresponding to a registered user
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postInterrogatePop(body: InterrogationPopInput, apikey: String, xFields: String? = nil, completion: @escaping ((_ data: InterrogationPopPayload?, _ error: Error?) -> Void)) {
        postInterrogatePopWithRequestBuilder(body: body, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Check if there are interrogation requests queued for fulfillment
          - POST /v2/interrogate/pop

          - examples: [{contentType=application/json, example={
       "forms" : [ {
         "form" : "caption",
         "payload" : {
           "*" : {
             "key" : "*"
           }
         },
         "source_image" : "source_image",
         "r2_upload" : "r2_upload",
         "id" : "id"
       }, {
         "form" : "caption",
         "payload" : {
           "*" : {
             "key" : "*"
           }
         },
         "source_image" : "source_image",
         "r2_upload" : "r2_upload",
         "id" : "id"
       } ],
       "skipped" : {
         "bridge_version" : 0,
         "untrusted" : 0,
         "worker_id" : 0
       }
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The API Key corresponding to a registered user
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<InterrogationPopPayload>
          */
    open class func postInterrogatePopWithRequestBuilder(body: InterrogationPopInput, apikey: String, xFields: String? = nil) -> HordeRequestBuilder<InterrogationPopPayload> {
        let path = "/v2/interrogate/pop"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<InterrogationPopPayload>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Submit the results of an interrogated image

     - parameter body: (body)
     - parameter apikey: (header) The worker&#x27;s owner API key
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postInterrogateSubmit(body: InterrogateSubmitBody, apikey: String, xFields: String? = nil, completion: @escaping ((_ data: GenerationSubmitted?, _ error: Error?) -> Void)) {
        postInterrogateSubmitWithRequestBuilder(body: body, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Submit the results of an interrogated image
          - POST /v2/interrogate/submit

          - examples: [{contentType=application/json, example={
       "reward" : 10.0
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The worker&#x27;s owner API key
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<GenerationSubmitted>
          */
    open class func postInterrogateSubmitWithRequestBuilder(body: InterrogateSubmitBody, apikey: String, xFields: String? = nil) -> HordeRequestBuilder<GenerationSubmitted> {
        let path = "/v2/interrogate/submit"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<GenerationSubmitted>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Receives kudos from the KoboldAI Horde

     - parameter body: (body)
     - parameter userId: (path)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postKoboldKudosTransfer(body: KaiUserIdBody, userId: String, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        postKoboldKudosTransferWithRequestBuilder(body: body, userId: userId).execute { _, error in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Receives kudos from the KoboldAI Horde
     - POST /v2/kudos/kai/{user_id}
     -

     - parameter body: (body)
     - parameter userId: (path)

     - returns: RequestBuilder<Void>
     */
    open class func postKoboldKudosTransferWithRequestBuilder(body: KaiUserIdBody, userId: String) -> HordeRequestBuilder<Void> {
        var path = "/v2/kudos/kai/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)

        let requestBuilder: HordeRequestBuilder<Void>.Type = HordeClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true)
    }

    /**
     Create a new team

     - parameter body: (body)
     - parameter apikey: (header) A User API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTeams(body: CreateTeamInput, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: ModifyTeam?, _ error: Error?) -> Void)) {
        postTeamsWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Create a new team
          - POST /v2/teams

          - examples: [{contentType=application/json, example={
       "name" : "name",
       "id" : "id",
       "info" : "info"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) A User API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<ModifyTeam>
          */
    open class func postTeamsWithRequestBuilder(body: CreateTeamInput, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<ModifyTeam> {
        let path = "/v2/teams"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<ModifyTeam>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Initiate an Asynchronous request to generate text

     - parameter body: (body)
     - parameter apikey: (header) The API Key corresponding to a registered user
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTextAsyncGenerate(body: GenerationInputKobold, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: RequestAsync?, _ error: Error?) -> Void)) {
        postTextAsyncGenerateWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Initiate an Asynchronous request to generate text
          - POST /v2/generate/text/async

          - examples: [{contentType=application/json, example={
       "kudos" : 0,
       "id" : "id",
       "message" : "message"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The API Key corresponding to a registered user
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<RequestAsync>
          */
    open class func postTextAsyncGenerateWithRequestBuilder(body: GenerationInputKobold, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<RequestAsync> {
        let path = "/v2/generate/text/async"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<RequestAsync>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Check if there are generation requests queued for fulfillment

     - parameter body: (body)
     - parameter apikey: (header) The API Key corresponding to a registered user
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTextJobPop(body: PopInputKobold, apikey: String, xFields: String? = nil, completion: @escaping ((_ data: GenerationPayload?, _ error: Error?) -> Void)) {
        postTextJobPopWithRequestBuilder(body: body, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Check if there are generation requests queued for fulfillment
          - POST /v2/generate/text/pop

          - examples: [{contentType=application/json, example={
       "softprompt" : "softprompt",
       "payload" : "",
       "model" : "model",
       "id" : "id",
       "skipped" : ""
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The API Key corresponding to a registered user
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<GenerationPayload>
          */
    open class func postTextJobPopWithRequestBuilder(body: PopInputKobold, apikey: String, xFields: String? = nil) -> HordeRequestBuilder<GenerationPayload> {
        let path = "/v2/generate/text/pop"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<GenerationPayload>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Submit generated text

     - parameter body: (body)
     - parameter apikey: (header) The worker&#x27;s owner API key
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTextJobSubmit(body: SubmitInput, apikey: String, xFields: String? = nil, completion: @escaping ((_ data: GenerationSubmitted?, _ error: Error?) -> Void)) {
        postTextJobSubmitWithRequestBuilder(body: body, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Submit generated text
          - POST /v2/generate/text/submit

          - examples: [{contentType=application/json, example={
       "reward" : 10.0
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The worker&#x27;s owner API key
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<GenerationSubmitted>
          */
    open class func postTextJobSubmitWithRequestBuilder(body: SubmitInput, apikey: String, xFields: String? = nil) -> HordeRequestBuilder<GenerationSubmitted> {
        let path = "/v2/generate/text/submit"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<GenerationSubmitted>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Transfer Kudos to another registed user

     - parameter body: (body)
     - parameter apikey: (header) The sending user&#x27;s API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTransferKudos(body: KudosTransferBody, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: KudosTransferred?, _ error: Error?) -> Void)) {
        postTransferKudosWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Transfer Kudos to another registed user
          - POST /v2/kudos/transfer
          -

          - examples: [{contentType=application/json, example={
       "transferred" : 100
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The sending user&#x27;s API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<KudosTransferred>
          */
    open class func postTransferKudosWithRequestBuilder(body: KudosTransferBody, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<KudosTransferred> {
        let path = "/v2/kudos/transfer"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<KudosTransferred>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Moderator Only: Add a new regex filter

     - parameter body: (body)
     - parameter apikey: (header) A mod API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putFilters(body: PutNewFilter, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: FilterDetails?, _ error: Error?) -> Void)) {
        putFiltersWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Moderator Only: Add a new regex filter
          - PUT /v2/filters
          -

          - examples: [{contentType=application/json, example={
       "regex" : "ac.*",
       "filter_type" : 10,
       "description" : "description",
       "id" : "id",
       "replacement" : "replacement",
       "user" : "user"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) A mod API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<FilterDetails>
          */
    open class func putFiltersWithRequestBuilder(body: PutNewFilter, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<FilterDetails> {
        let path = "/v2/filters"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<FilterDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Change Horde Modes

     - parameter body: (body)
     - parameter apikey: (header) The Admin API key
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putHordeModes(body: StatusModesBody, apikey: String, xFields: String? = nil, completion: @escaping ((_ data: HordeModes?, _ error: Error?) -> Void)) {
        putHordeModesWithRequestBuilder(body: body, apikey: apikey, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Change Horde Modes
          - PUT /v2/status/modes

          - examples: [{contentType=application/json, example={
       "raid_mode" : true,
       "maintenance_mode" : true,
       "invite_only_mode" : true
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The Admin API key
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<HordeModes>
          */
    open class func putHordeModesWithRequestBuilder(body: StatusModesBody, apikey: String, xFields: String? = nil) -> HordeRequestBuilder<HordeModes> {
        let path = "/v2/status/modes"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<HordeModes>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create a new SharedKey for this user

     - parameter body: (body)
     - parameter apikey: (header) User API key
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putSharedKey(body: SharedKeyInput, apikey: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: SharedKeyDetails?, _ error: Error?) -> Void)) {
        putSharedKeyWithRequestBuilder(body: body, apikey: apikey, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Create a new SharedKey for this user
          - PUT /v2/sharedkeys
          -

          - examples: [{contentType=application/json, example={
       "kudos" : 0,
       "id" : "id",
       "expiry" : "2000-01-23T04:56:07.000+00:00",
       "utilized" : 6,
       "username" : "username"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) User API key
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<SharedKeyDetails>
          */
    open class func putSharedKeyWithRequestBuilder(body: SharedKeyInput, apikey: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<SharedKeyDetails> {
        let path = "/v2/sharedkeys"
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<SharedKeyDetails>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Endpoint for horde admins to perform operations on users

     - parameter body: (body)
     - parameter apikey: (header) The Admin API key
     - parameter userId: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserSingle(body: ModifyUserInput, apikey: String, userId: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: ModifyUser?, _ error: Error?) -> Void)) {
        putUserSingleWithRequestBuilder(body: body, apikey: apikey, userId: userId, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Endpoint for horde admins to perform operations on users
          - PUT /v2/users/{user_id}
          -

          - examples: [{contentType=application/json, example={
       "new_kudos" : 0.8008281904610115,
       "usage_multiplier" : 1.0,
       "moderator" : false,
       "worker_invited" : 1,
       "public_workers" : false,
       "new_suspicion" : 6,
       "customizer" : true,
       "concurrency" : 30,
       "flagged" : true,
       "trusted" : true,
       "vpn" : true,
       "contact" : "email@example.com",
       "monthly_kudos" : 0,
       "username" : "username#1"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The Admin API key
          - parameter userId: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<ModifyUser>
          */
    open class func putUserSingleWithRequestBuilder(body: ModifyUserInput, apikey: String, userId: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<ModifyUser> {
        var path = "/v2/users/{user_id}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<ModifyUser>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Put the worker into maintenance or pause mode

     - parameter body: (body)
     - parameter apikey: (header) The Moderator or Owner API key
     - parameter workerId: (path)
     - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
     - parameter xFields: (header) An optional fields mask (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putWorkerSingle(body: ModifyWorkerInput, apikey: String, workerId: String, clientAgent: String? = nil, xFields: String? = nil, completion: @escaping ((_ data: ModifyWorker?, _ error: Error?) -> Void)) {
        putWorkerSingleWithRequestBuilder(body: body, apikey: apikey, workerId: workerId, clientAgent: clientAgent, xFields: xFields).execute { response, error in
            completion(response?.body, error)
        }
    }

    /**
          Put the worker into maintenance or pause mode
          - PUT /v2/workers/{worker_id}

          - examples: [{contentType=application/json, example={
       "paused" : true,
       "name" : "name",
       "team" : "Direct Action",
       "maintenance" : true,
       "info" : "info"
     }}]
          - parameter body: (body)
          - parameter apikey: (header) The Moderator or Owner API key
          - parameter workerId: (path)
          - parameter clientAgent: (header) The client name and version (optional, default to unknown:0:unknown)
          - parameter xFields: (header) An optional fields mask (optional)

          - returns: RequestBuilder<ModifyWorker>
          */
    open class func putWorkerSingleWithRequestBuilder(body: ModifyWorkerInput, apikey: String, workerId: String, clientAgent: String? = nil, xFields: String? = nil) -> HordeRequestBuilder<ModifyWorker> {
        var path = "/v2/workers/{worker_id}"
        let workerIdPreEscape = "\(workerId)"
        let workerIdPostEscape = workerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{worker_id}", with: workerIdPostEscape, options: .literal, range: nil)
        let URLString = HordeClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "apikey": apikey,
            "Client-Agent": clientAgent,
            "X-Fields": xFields,
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: HordeRequestBuilder<ModifyWorker>.Type = HordeClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: url?.string ?? URLString, parameters: parameters, isBody: true, headers: headerParameters)
    }
}
