//
// PopInputStable.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public struct PopInputStable: Codable {
    /** The Name of the Worker */
    public var name: String?
    public var priorityUsernames: [String]?
    /** Whether this worker can generate NSFW requests or not. */
    public var nsfw: Bool?
    public var models: [String]?
    /** The version of the bridge used by this worker */
    public var bridgeVersion: Int?
    /** The worker name, version and website */
    public var bridgeAgent: String?
    /** How many threads this worker is running. This is used to accurately the current power available in the horde */
    public var threads: Int?
    /** If True, this worker will only pick up requests where the owner has the required kudos to consume already available. */
    public var requireUpfrontKudos: Bool?
    /** The maximum amount of pixels this worker can generate */
    public var maxPixels: Int?
    public var blacklist: [String]?
    /** If True, this worker will pick up img2img requests */
    public var allowImg2img: Bool?
    /** If True, this worker will pick up inpainting/outpainting requests */
    public var allowPainting: Bool?
    /** If True, this worker will pick up img2img requests coming from clients with an unsafe IP. */
    public var allowUnsafeIpaddr: Bool?
    /** If True, this worker will pick up requests requesting post-processing. */
    public var allowPostProcessing: Bool?
    /** If True, this worker will pick up requests requesting ControlNet. */
    public var allowControlnet: Bool?
    /** If True, this worker will pick up requests requesting LoRas. */
    public var allowLora: Bool?

    public init(name: String? = nil, priorityUsernames: [String]? = nil, nsfw: Bool? = nil, models: [String]? = nil, bridgeVersion: Int? = nil, bridgeAgent: String? = nil, threads: Int? = nil, requireUpfrontKudos: Bool? = nil, maxPixels: Int? = nil, blacklist: [String]? = nil, allowImg2img: Bool? = nil, allowPainting: Bool? = nil, allowUnsafeIpaddr: Bool? = nil, allowPostProcessing: Bool? = nil, allowControlnet: Bool? = nil, allowLora: Bool? = nil) {
        self.name = name
        self.priorityUsernames = priorityUsernames
        self.nsfw = nsfw
        self.models = models
        self.bridgeVersion = bridgeVersion
        self.bridgeAgent = bridgeAgent
        self.threads = threads
        self.requireUpfrontKudos = requireUpfrontKudos
        self.maxPixels = maxPixels
        self.blacklist = blacklist
        self.allowImg2img = allowImg2img
        self.allowPainting = allowPainting
        self.allowUnsafeIpaddr = allowUnsafeIpaddr
        self.allowPostProcessing = allowPostProcessing
        self.allowControlnet = allowControlnet
        self.allowLora = allowLora
    }

    public enum CodingKeys: String, CodingKey {
        case name
        case priorityUsernames = "priority_usernames"
        case nsfw
        case models
        case bridgeVersion = "bridge_version"
        case bridgeAgent = "bridge_agent"
        case threads
        case requireUpfrontKudos = "require_upfront_kudos"
        case maxPixels = "max_pixels"
        case blacklist
        case allowImg2img = "allow_img2img"
        case allowPainting = "allow_painting"
        case allowUnsafeIpaddr = "allow_unsafe_ipaddr"
        case allowPostProcessing = "allow_post_processing"
        case allowControlnet = "allow_controlnet"
        case allowLora = "allow_lora"
    }
}
