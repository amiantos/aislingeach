//
// WorkerDetails.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public struct WorkerDetails: Codable {
    public enum ModelType: String, Codable {
        case image
        case text
        case interrogation
    }

    /** The Type of worker this is. */
    public var type: ModelType?
    /** The Name given to this worker. */
    public var name: String?
    /** The UUID of this worker. */
    public var _id: String?
    /** True if the worker has checked-in the past 5 minutes. */
    public var online: Bool?
    /** How many images this worker has generated. */
    public var requestsFulfilled: Int?
    /** How many Kudos this worker has been rewarded in total. */
    public var kudosRewards: Decimal?
    public var kudosDetails: WorkerKudosDetails?
    /** The average performance of this worker in human readable form. */
    public var performance: String?
    /** How many threads this worker is running. */
    public var threads: Int?
    /** The amount of seconds this worker has been online for this Horde. */
    public var uptime: Int?
    /** When True, this worker will not pick up any new requests */
    public var maintenanceMode: Bool?
    /** (Privileged) When True, this worker not be given any new requests. */
    public var paused: Bool?
    /** Extra information or comments about this worker provided by its owner. */
    public var info: String?
    /** Whether this worker can generate NSFW requests or not. */
    public var nsfw: Bool?
    /** Privileged or public if the owner has allowed it. The alias of the owner of this worker. */
    public var owner: String?
    /** The worker is trusted to return valid generations. */
    public var trusted: Bool?
    /** The worker&#x27;s owner has been flagged for suspicious activity. This worker will not be given any jobs to process. */
    public var flagged: Bool?
    /** (Privileged) How much suspicion this worker has accumulated */
    public var suspicious: Int?
    /** How many jobs this worker has left uncompleted after it started them. */
    public var uncompletedJobs: Int?
    public var models: [String]?
    public var team: TeamDetailsLite?
    /** (Privileged) Contact details for the horde admins to reach the owner of this worker in emergencies. */
    public var contact: String?
    /** The bridge agent name, version and website */
    public var bridgeAgent: String
    /** The maximum pixels in resolution this worker can generate */
    public var maxPixels: Int?
    /** How many megapixelsteps this worker has generated until now */
    public var megapixelstepsGenerated: Decimal?
    /** If True, this worker supports and allows img2img requests. */
    public var img2img: Bool?
    /** If True, this worker supports and allows inpainting requests. */
    public var painting: Bool?
    /** If True, this worker supports and allows post-processing requests. */
    public var postProcessing: Bool?
    /** If True, this worker supports and allows lora requests. */
    public var lora: Bool?
    /** The maximum tokens this worker can generate */
    public var maxLength: Int?
    /** The maximum tokens this worker can read */
    public var maxContextLength: Int?
    /** How many tokens this worker has generated until now */
    public var tokensGenerated: Decimal?

    public init(type: ModelType? = nil, name: String? = nil, _id: String? = nil, online: Bool? = nil, requestsFulfilled: Int? = nil, kudosRewards: Decimal? = nil, kudosDetails: WorkerKudosDetails? = nil, performance: String? = nil, threads: Int? = nil, uptime: Int? = nil, maintenanceMode: Bool? = nil, paused: Bool? = nil, info: String? = nil, nsfw: Bool? = nil, owner: String? = nil, trusted: Bool? = nil, flagged: Bool? = nil, suspicious: Int? = nil, uncompletedJobs: Int? = nil, models: [String]? = nil, team: TeamDetailsLite? = nil, contact: String? = nil, bridgeAgent: String, maxPixels: Int? = nil, megapixelstepsGenerated: Decimal? = nil, img2img: Bool? = nil, painting: Bool? = nil, postProcessing: Bool? = nil, lora: Bool? = nil, maxLength: Int? = nil, maxContextLength: Int? = nil, tokensGenerated: Decimal? = nil) {
        self.type = type
        self.name = name
        self._id = _id
        self.online = online
        self.requestsFulfilled = requestsFulfilled
        self.kudosRewards = kudosRewards
        self.kudosDetails = kudosDetails
        self.performance = performance
        self.threads = threads
        self.uptime = uptime
        self.maintenanceMode = maintenanceMode
        self.paused = paused
        self.info = info
        self.nsfw = nsfw
        self.owner = owner
        self.trusted = trusted
        self.flagged = flagged
        self.suspicious = suspicious
        self.uncompletedJobs = uncompletedJobs
        self.models = models
        self.team = team
        self.contact = contact
        self.bridgeAgent = bridgeAgent
        self.maxPixels = maxPixels
        self.megapixelstepsGenerated = megapixelstepsGenerated
        self.img2img = img2img
        self.painting = painting
        self.postProcessing = postProcessing
        self.lora = lora
        self.maxLength = maxLength
        self.maxContextLength = maxContextLength
        self.tokensGenerated = tokensGenerated
    }

    public enum CodingKeys: String, CodingKey {
        case type
        case name
        case _id = "id"
        case online
        case requestsFulfilled = "requests_fulfilled"
        case kudosRewards = "kudos_rewards"
        case kudosDetails = "kudos_details"
        case performance
        case threads
        case uptime
        case maintenanceMode = "maintenance_mode"
        case paused
        case info
        case nsfw
        case owner
        case trusted
        case flagged
        case suspicious
        case uncompletedJobs = "uncompleted_jobs"
        case models
        case team
        case contact
        case bridgeAgent = "bridge_agent"
        case maxPixels = "max_pixels"
        case megapixelstepsGenerated = "megapixelsteps_generated"
        case img2img
        case painting
        case postProcessing = "post-processing"
        case lora
        case maxLength = "max_length"
        case maxContextLength = "max_context_length"
        case tokensGenerated = "tokens_generated"
    }
}
