//
// GenerationPayloadStable.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public struct GenerationPayloadStable: Codable {
    public enum SourceProcessing: String, Codable {
        case img2img
        case inpainting
        case outpainting
    }

    public var payload: ModelPayloadStable?
    /** The UUID for this image generation */
    public var _id: String?
    public var skipped: NoValidRequestFoundStable?
    /** Which of the available models to use for this request */
    public var model: String?
    /** The Base64-encoded webp to use for img2img */
    public var sourceImage: String?
    /** If source_image is provided, specifies how to process it. */
    public var sourceProcessing: SourceProcessing?
    /** If img_processing is set to &#x27;inpainting&#x27; or &#x27;outpainting&#x27;, this parameter can be optionally provided as the mask of the areas to inpaint. If this arg is not passed, the inpainting/outpainting mask has to be embedded as alpha channel */
    public var sourceMask: String?
    /** The r2 upload link to use to upload this image */
    public var r2Upload: String?

    public init(payload: ModelPayloadStable? = nil, _id: String? = nil, skipped: NoValidRequestFoundStable? = nil, model: String? = nil, sourceImage: String? = nil, sourceProcessing: SourceProcessing? = nil, sourceMask: String? = nil, r2Upload: String? = nil) {
        self.payload = payload
        self._id = _id
        self.skipped = skipped
        self.model = model
        self.sourceImage = sourceImage
        self.sourceProcessing = sourceProcessing
        self.sourceMask = sourceMask
        self.r2Upload = r2Upload
    }

    public enum CodingKeys: String, CodingKey {
        case payload
        case _id = "id"
        case skipped
        case model
        case sourceImage = "source_image"
        case sourceProcessing = "source_processing"
        case sourceMask = "source_mask"
        case r2Upload = "r2_upload"
    }
}
