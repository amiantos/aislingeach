//
// ModelPayloadStable.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ModelPayloadStable: Codable {

    public enum SamplerName: String, Codable { 
        case kLms = "k_lms"
        case kHeun = "k_heun"
        case kEuler = "k_euler"
        case kEulerA = "k_euler_a"
        case kDpm2 = "k_dpm_2"
        case kDpm2A = "k_dpm_2_a"
        case kDpmFast = "k_dpm_fast"
        case kDpmAdaptive = "k_dpm_adaptive"
        case kDpmpp2sA = "k_dpmpp_2s_a"
        case kDpmpp2m = "k_dpmpp_2m"
        case dpmsolver = "dpmsolver"
        case kDpmppSde = "k_dpmpp_sde"
        case ddim = "DDIM"
    }
    public enum PostProcessing: String, Codable { 
        case gfpgan = "GFPGAN"
        case realesrganX4plus = "RealESRGAN_x4plus"
        case realesrganX2plus = "RealESRGAN_x2plus"
        case realesrganX4plusAnime6b = "RealESRGAN_x4plus_anime_6B"
        case nmkdSiax = "NMKD_Siax"
        case _4xAnimeSharp = "4x_AnimeSharp"
        case codeFormers = "CodeFormers"
        case stripBackground = "strip_background"
    }
    public enum ControlType: String, Codable { 
        case canny = "canny"
        case hed = "hed"
        case depth = "depth"
        case normal = "normal"
        case openpose = "openpose"
        case seg = "seg"
        case scribble = "scribble"
        case fakescribbles = "fakescribbles"
        case hough = "hough"
    }
    public var samplerName: SamplerName?
    public var cfgScale: Decimal?
    public var denoisingStrength: Decimal?
    /** The seed to use to generate this request. You can pass text as well as numbers. */
    public var seed: String?
    /** The height of the image to generate */
    public var height: Int?
    /** The width of the image to generate */
    public var width: Int?
    /** If passed with multiple n, the provided seed will be incremented every time by this value */
    public var seedVariation: Int?
    public var postProcessing: [PostProcessing]?
    /** Set to True to enable karras noise scheduling tweaks */
    public var karras: Bool?
    /** Set to True to create images that stitch together seamlessly */
    public var tiling: Bool?
    /** Set to True to process the image at base resolution before upscaling and re-processing */
    public var hiresFix: Bool?
    /** The number of CLIP language processor layers to skip */
    public var clipSkip: Int?
    public var controlType: ControlType?
    /** Set to True if the image submitted is a pre-generated control map for ControlNet use */
    public var imageIsControl: Bool?
    /** Set to True if you want the ControlNet map returned instead of a generated image */
    public var returnControlMap: Bool?
    public var facefixerStrength: Decimal?
    public var loras: [ModelPayloadLorasStable]?
    /** The prompt which will be sent to Stable Diffusion to generate an image */
    public var prompt: String?
    public var ddimSteps: Int?
    /** The amount of images to generate */
    public var nIter: Int?
    /** When true will apply NSFW censoring model on the generation */
    public var useNsfwCensor: Bool?

    public init(samplerName: SamplerName? = nil, cfgScale: Decimal? = nil, denoisingStrength: Decimal? = nil, seed: String? = nil, height: Int? = nil, width: Int? = nil, seedVariation: Int? = nil, postProcessing: [PostProcessing]? = nil, karras: Bool? = nil, tiling: Bool? = nil, hiresFix: Bool? = nil, clipSkip: Int? = nil, controlType: ControlType? = nil, imageIsControl: Bool? = nil, returnControlMap: Bool? = nil, facefixerStrength: Decimal? = nil, loras: [ModelPayloadLorasStable]? = nil, prompt: String? = nil, ddimSteps: Int? = nil, nIter: Int? = nil, useNsfwCensor: Bool? = nil) {
        self.samplerName = samplerName
        self.cfgScale = cfgScale
        self.denoisingStrength = denoisingStrength
        self.seed = seed
        self.height = height
        self.width = width
        self.seedVariation = seedVariation
        self.postProcessing = postProcessing
        self.karras = karras
        self.tiling = tiling
        self.hiresFix = hiresFix
        self.clipSkip = clipSkip
        self.controlType = controlType
        self.imageIsControl = imageIsControl
        self.returnControlMap = returnControlMap
        self.facefixerStrength = facefixerStrength
        self.loras = loras
        self.prompt = prompt
        self.ddimSteps = ddimSteps
        self.nIter = nIter
        self.useNsfwCensor = useNsfwCensor
    }

    public enum CodingKeys: String, CodingKey { 
        case samplerName = "sampler_name"
        case cfgScale = "cfg_scale"
        case denoisingStrength = "denoising_strength"
        case seed
        case height
        case width
        case seedVariation = "seed_variation"
        case postProcessing = "post_processing"
        case karras
        case tiling
        case hiresFix = "hires_fix"
        case clipSkip = "clip_skip"
        case controlType = "control_type"
        case imageIsControl = "image_is_control"
        case returnControlMap = "return_control_map"
        case facefixerStrength = "facefixer_strength"
        case loras
        case prompt
        case ddimSteps = "ddim_steps"
        case nIter = "n_iter"
        case useNsfwCensor = "use_nsfw_censor"
    }

}
