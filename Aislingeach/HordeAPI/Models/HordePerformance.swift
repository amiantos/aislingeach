//
// HordePerformance.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct HordePerformance: Codable {

    /** The amount of waiting and processing image requests currently in this Horde */
    public var queuedRequests: Int?
    /** The amount of waiting and processing text requests currently in this Horde */
    public var queuedTextRequests: Int?
    /** How many workers are actively processing prompt generations in this Horde in the past 5 minutes */
    public var workerCount: Int?
    /** How many workers are actively processing prompt generations in this Horde in the past 5 minutes */
    public var textWorkerCount: Int?
    /** How many worker threads are actively processing prompt generations in this Horde in the past 5 minutes */
    public var threadCount: Int?
    /** How many worker threads are actively processing prompt generations in this Horde in the past 5 minutes */
    public var textThreadCount: Int?
    /** The amount of megapixelsteps in waiting and processing requests currently in this Horde */
    public var queuedMegapixelsteps: Decimal?
    /** How many megapixelsteps this Horde generated in the last minute */
    public var pastMinuteMegapixelsteps: Decimal?
    /** The amount of image interrogations waiting and processing currently in this Horde */
    public var queuedForms: Decimal?
    /** How many workers are actively processing image interrogations in this Horde in the past 5 minutes */
    public var interrogatorCount: Int?
    /** How many worker threads are actively processing image interrogation in this Horde in the past 5 minutes */
    public var interrogatorThreadCount: Int?
    /** The amount of tokens in waiting and processing requests currently in this Horde */
    public var queuedTokens: Decimal?
    /** How many tokens this Horde generated in the last minute */
    public var pastMinuteTokens: Decimal?

    public init(queuedRequests: Int? = nil, queuedTextRequests: Int? = nil, workerCount: Int? = nil, textWorkerCount: Int? = nil, threadCount: Int? = nil, textThreadCount: Int? = nil, queuedMegapixelsteps: Decimal? = nil, pastMinuteMegapixelsteps: Decimal? = nil, queuedForms: Decimal? = nil, interrogatorCount: Int? = nil, interrogatorThreadCount: Int? = nil, queuedTokens: Decimal? = nil, pastMinuteTokens: Decimal? = nil) {
        self.queuedRequests = queuedRequests
        self.queuedTextRequests = queuedTextRequests
        self.workerCount = workerCount
        self.textWorkerCount = textWorkerCount
        self.threadCount = threadCount
        self.textThreadCount = textThreadCount
        self.queuedMegapixelsteps = queuedMegapixelsteps
        self.pastMinuteMegapixelsteps = pastMinuteMegapixelsteps
        self.queuedForms = queuedForms
        self.interrogatorCount = interrogatorCount
        self.interrogatorThreadCount = interrogatorThreadCount
        self.queuedTokens = queuedTokens
        self.pastMinuteTokens = pastMinuteTokens
    }

    public enum CodingKeys: String, CodingKey { 
        case queuedRequests = "queued_requests"
        case queuedTextRequests = "queued_text_requests"
        case workerCount = "worker_count"
        case textWorkerCount = "text_worker_count"
        case threadCount = "thread_count"
        case textThreadCount = "text_thread_count"
        case queuedMegapixelsteps = "queued_megapixelsteps"
        case pastMinuteMegapixelsteps = "past_minute_megapixelsteps"
        case queuedForms = "queued_forms"
        case interrogatorCount = "interrogator_count"
        case interrogatorThreadCount = "interrogator_thread_count"
        case queuedTokens = "queued_tokens"
        case pastMinuteTokens = "past_minute_tokens"
    }

}
