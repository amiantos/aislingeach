//
// RequestStatusKobold.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct RequestStatusKobold: Codable {

    /** The amount of finished jobs in this request */
    public var finished: Int?
    /** The amount of still processing jobs in this request */
    public var processing: Int?
    /** The amount of jobs that timed out and had to be restarted or were reported as failed by a worker */
    public var restarted: Int?
    /** The amount of jobs waiting to be picked up by a worker */
    public var waiting: Int?
    /** True when all jobs in this request are done. Else False. */
    public var done: Bool?
    /** True when this request caused an internal server error and could not be completed. */
    public var faulted: Bool?
    /** The expected amount to wait (in seconds) to generate all jobs in this request */
    public var waitTime: Int?
    /** The position in the requests queue. This position is determined by relative Kudos amounts. */
    public var queuePosition: Int?
    /** The amount of total Kudos this request has consumed until now. */
    public var kudos: Decimal?
    /** If False, this request will not be able to be completed with the pool of workers currently available */
    public var isPossible: Bool?
    public var generations: [GenerationKobold]?

    public init(finished: Int? = nil, processing: Int? = nil, restarted: Int? = nil, waiting: Int? = nil, done: Bool? = nil, faulted: Bool? = nil, waitTime: Int? = nil, queuePosition: Int? = nil, kudos: Decimal? = nil, isPossible: Bool? = nil, generations: [GenerationKobold]? = nil) {
        self.finished = finished
        self.processing = processing
        self.restarted = restarted
        self.waiting = waiting
        self.done = done
        self.faulted = faulted
        self.waitTime = waitTime
        self.queuePosition = queuePosition
        self.kudos = kudos
        self.isPossible = isPossible
        self.generations = generations
    }

    public enum CodingKeys: String, CodingKey { 
        case finished
        case processing
        case restarted
        case waiting
        case done
        case faulted
        case waitTime = "wait_time"
        case queuePosition = "queue_position"
        case kudos
        case isPossible = "is_possible"
        case generations
    }

}
