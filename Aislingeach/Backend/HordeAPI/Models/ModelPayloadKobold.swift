//
// ModelPayloadKobold.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ModelPayloadKobold: Codable {

    public var n: Int?
    /** Input formatting option. When enabled, adds a leading space to your input if there is no trailing whitespace at the end of the previous action. */
    public var frmtadsnsp: Bool?
    /** Output formatting option. When enabled, replaces all occurrences of two or more consecutive newlines in the output with one newline. */
    public var frmtrmblln: Bool?
    /** Output formatting option. When enabled, removes #/@%}{+&#x3D;~|\\^&lt;&gt; from the output. */
    public var frmtrmspch: Bool?
    /** Output formatting option. When enabled, removes some characters from the end of the output such that the output doesn&#x27;t end in the middle of a sentence. If the output is less than one sentence long, does nothing. */
    public var frmttriminc: Bool?
    /** Maximum number of tokens to send to the model. */
    public var maxContextLength: Int?
    /** Number of tokens to generate. */
    public var maxLength: Int?
    /** Base repetition penalty value. */
    public var repPen: Decimal?
    /** Repetition penalty range. */
    public var repPenRange: Int?
    /** Repetition penalty slope. */
    public var repPenSlope: Decimal?
    /** Output formatting option. When enabled, removes everything after the first line of the output, including the newline. */
    public var singleline: Bool?
    /** Temperature value. */
    public var temperature: Decimal?
    /** Tail free sampling value. */
    public var tfs: Decimal?
    /** Top-a sampling value. */
    public var topA: Decimal?
    /** Top-k sampling value. */
    public var topK: Int?
    /** Top-p sampling value. */
    public var topP: Decimal?
    /** Typical sampling value. */
    public var typical: Decimal?
    public var samplerOrder: [Int]?
    /** The prompt which will be sent to KoboldAI to generate the text */
    public var prompt: String?

    public init(n: Int? = nil, frmtadsnsp: Bool? = nil, frmtrmblln: Bool? = nil, frmtrmspch: Bool? = nil, frmttriminc: Bool? = nil, maxContextLength: Int? = nil, maxLength: Int? = nil, repPen: Decimal? = nil, repPenRange: Int? = nil, repPenSlope: Decimal? = nil, singleline: Bool? = nil, temperature: Decimal? = nil, tfs: Decimal? = nil, topA: Decimal? = nil, topK: Int? = nil, topP: Decimal? = nil, typical: Decimal? = nil, samplerOrder: [Int]? = nil, prompt: String? = nil) {
        self.n = n
        self.frmtadsnsp = frmtadsnsp
        self.frmtrmblln = frmtrmblln
        self.frmtrmspch = frmtrmspch
        self.frmttriminc = frmttriminc
        self.maxContextLength = maxContextLength
        self.maxLength = maxLength
        self.repPen = repPen
        self.repPenRange = repPenRange
        self.repPenSlope = repPenSlope
        self.singleline = singleline
        self.temperature = temperature
        self.tfs = tfs
        self.topA = topA
        self.topK = topK
        self.topP = topP
        self.typical = typical
        self.samplerOrder = samplerOrder
        self.prompt = prompt
    }

    public enum CodingKeys: String, CodingKey { 
        case n
        case frmtadsnsp
        case frmtrmblln
        case frmtrmspch
        case frmttriminc
        case maxContextLength = "max_context_length"
        case maxLength = "max_length"
        case repPen = "rep_pen"
        case repPenRange = "rep_pen_range"
        case repPenSlope = "rep_pen_slope"
        case singleline
        case temperature
        case tfs
        case topA = "top_a"
        case topK = "top_k"
        case topP = "top_p"
        case typical
        case samplerOrder = "sampler_order"
        case prompt
    }

}
