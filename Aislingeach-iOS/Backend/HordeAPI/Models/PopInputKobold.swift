//
// PopInputKobold.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct PopInputKobold: Codable {

    /** The Name of the Worker */
    public var name: String?
    public var priorityUsernames: [String]?
    /** Whether this worker can generate NSFW requests or not. */
    public var nsfw: Bool?
    public var models: [String]?
    /** The version of the bridge used by this worker */
    public var bridgeVersion: Int?
    /** The worker name, version and website */
    public var bridgeAgent: String?
    /** How many threads this worker is running. This is used to accurately the current power available in the horde */
    public var threads: Int?
    /** If True, this worker will only pick up requests where the owner has the required kudos to consume already available. */
    public var requireUpfrontKudos: Bool?
    /** The maximum amount of tokens this worker can generate */
    public var maxLength: Int?
    /** The max amount of context to submit to this AI for sampling. */
    public var maxContextLength: Int?
    public var softprompts: [String]?

    public init(name: String? = nil, priorityUsernames: [String]? = nil, nsfw: Bool? = nil, models: [String]? = nil, bridgeVersion: Int? = nil, bridgeAgent: String? = nil, threads: Int? = nil, requireUpfrontKudos: Bool? = nil, maxLength: Int? = nil, maxContextLength: Int? = nil, softprompts: [String]? = nil) {
        self.name = name
        self.priorityUsernames = priorityUsernames
        self.nsfw = nsfw
        self.models = models
        self.bridgeVersion = bridgeVersion
        self.bridgeAgent = bridgeAgent
        self.threads = threads
        self.requireUpfrontKudos = requireUpfrontKudos
        self.maxLength = maxLength
        self.maxContextLength = maxContextLength
        self.softprompts = softprompts
    }

    public enum CodingKeys: String, CodingKey { 
        case name
        case priorityUsernames = "priority_usernames"
        case nsfw
        case models
        case bridgeVersion = "bridge_version"
        case bridgeAgent = "bridge_agent"
        case threads
        case requireUpfrontKudos = "require_upfront_kudos"
        case maxLength = "max_length"
        case maxContextLength = "max_context_length"
        case softprompts
    }

}
